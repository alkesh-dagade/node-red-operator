---
# tasks file for noderedhelmansible
- name: set default volumes
  set_fact:
    volumeMounts:
      - mountPath: /data/usr/conf
        name: config-volume
    volumeNames:
      - configMap:
          name: settings-configmap
        name: config-volume

- block:
    - name: set volume
      set_fact:
        volumeMounts:
          - mountPath: /data/usr/conf
            name: config-volume
          - mountPath: /data
            name: data
        volumeNames:
          - configMap:
              name: settings-configmap
            name: config-volume
          - name: data
            persistentVolumeClaim:
              claimName:  node-red-pvc
  when: persistentvolume.enabled is defined and persistentvolume.enabled|bool == true

#- name: create pvc
#  when: persistentvolume.enabled is defined and persistentvolume.enabled|bool == true
#  k8s:
#     definition:
#       apiVersion: v1
#       kind: PersistentVolumeClaim
#       metadata:
#         name: node-red-pvc
#         namespace: "{{ meta.namespace }}"
#         labels:
#           app: node-red-app
#       spec:
#         storageClassName: "{{ persistentvolume.storageclass }}"
#         accessModes:
#           - ReadWriteMany
#         resources:
#           requests:
#             storage: "{{ persistentvolume.size | quote }}"


- name: create config-map
  include_tasks: configmap.yaml

#- name: upgrade deployment
#  include_tasks: upgrade.yaml

- name: deploy node-red
  vars:
    newimage:  "{{ lookup('env','RELATED_IMAGE_NODERED') }}"
  k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: node-red
        namespace: "{{ meta.namespace }}"
      spec:
        selector:
          matchLabels:
            app: node-red-app
        replicas: "{{ size }}"
        strategy:
          type: Recreate
          rollingUpdate: null
        template:
          metadata:
            labels:
              app: node-red-app
          spec:
            imagePullSecrets:
            serviceAccountName: node-red-operator
            securityContext:
              fsGroup: 1000
            containers:
            - name: node-red
              image: "{{ newimage }}"
              imagePullPolicy: Always
              ports:
               - containerPort: 1880
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  path: /
                  port: 1880
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  scheme: HTTP
                  path: /
                  port: 1880
                initialDelaySeconds: 30
                failureThreshold: 5
                periodSeconds: 30
                timeoutSeconds: 5
              volumeMounts: "{{ volumeMounts }}"
              command:
                - /bin/sh
                - -c
                - |
                  
                  #(crontab -l 2>/dev/null; echo '*/2 * * * * if [ -f "/data/restore_done.sh" ]; then echo "Restoring......." && cd /data/  && npm install && cd /usr/src/node-red/ && npm start -- --settings /data/usr/conf/settings.js && rm -rf /data/restore_done.sh && echo "Restore Complete"; fi') | crontab -
                  
                  #cd /usr/src/node-red/ && npm start -- --settings /data/usr/conf/settings.js 
                  
                  echo "Installing Packages ++++++++++++++++"
                  if [ -f "/data/package.json" ]; then cd /data/  && npm install; fi
                  echo "Installed +++++++++++++++++++"
                  cd /usr/src/node-red/ && npm start -- --settings /data/usr/conf/settings.js 

            volumes: "{{ volumeNames }}"

- name: create service
  k8s:
    definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ service.name }}"
          namespace: "{{ meta.namespace }}"
          labels:
            app: node-red-app
        spec:
          selector:
              app: node-red-app
          type: "{{ service.type }}"
          ports:
            - name: 1880-tcp
              protocol: TCP
              port: 1880
              targetPort: 1880

- name: create route
  when: route.enabled is defined and route.enabled|bool == true
  k8s:
    definition:
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: "{{ route.path }}"
          namespace: "{{ meta.namespace }}"
          labels:
            app: node-red-app
        spec:
          to:
            kind: Service
            name: "{{ service.name }}"
          port:
            targetPort: 1880-tcp

